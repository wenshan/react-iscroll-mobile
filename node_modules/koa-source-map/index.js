var Buffer = require('buffer').Buffer;
function inlineSourceMap(sourceMaps, sourceCode, sourceFilename) {
  // This can be used with a sourcemap that has already has toJSON called on it.
  // Check first.
  var json = sourceMaps;
  if (typeof sourceMaps.toJSON === 'function') {
    json = sourceMaps.toJSON();
  }
  // console.log(json);
  json.sources = [sourceFilename];
  json.sourcesContent = [sourceCode];
  var base64 = Buffer(JSON.stringify(json)).toString('base64');
  return '//# sourceMappingURL=data:application/json;base64,' + base64;
}

var SourceMap = require('source-map');

module.exports = function (option) {
  return function *(next) {
    var yiminghe = this.yiminghe || {};
    var sourceMaps = yiminghe.sourceMaps;
    if (option.skip && option.skip(this, next)) {
      return;
    }
    if (sourceMaps && sourceMaps.length) {
      this.body = this.body.replace(/\/\/[@#]\ssourceMappingURL[^\r\n]*/g, '//');
      // sourceMaps = sourceMaps.reverse();
      // Mutliple levels of SourceMaps (like jsx -> js -> wrap)
      // reverse map modify wrapMap <- jsxMap
      var map = SourceMap.SourceMapGenerator.fromSourceMap(new SourceMap.SourceMapConsumer(sourceMaps[0]));
      for (var i = 1; i < sourceMaps.length; i++) {
        map.applySourceMap(new SourceMap.SourceMapConsumer(sourceMaps[i]), this.url);
      }
      this.body += '\n' + inlineSourceMap(map, yiminghe.source, 'yiminghe://' + this.url);
    } else {
      yield *next;
    }
  };
};
